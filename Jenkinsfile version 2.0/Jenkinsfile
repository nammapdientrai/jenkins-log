node {
    def JobName = "jenkins-log-master"

    def consoleOutput = (List<String>) []

    def status = true

    while(status) {
        def tmp = getLog(JobName, BuildNumber)

        consoleOutput = catchLog(consoleOutput, tmp)

        sleep(3)

        if(consoleOutput.size() > 0 && checkStop( consoleOutput[consoleOutput.size() -1].trim() ) ) {
            status = false
        }
    }
}

def List<String> getLog(String JobName, String BuildNumber, index) {
    def log = sh(returnStdout: true, script: "curl -X GET -u 'namth22:Thn#025381961' 'http://192.168.56.106:8080/jenkins/job/${JobName}/${BuildNumber}/consoleText'")

    def logsOutput = (List<String>) log.split("\n")
    def logsTmp = (List<String>) []

    def sizeLogsOutput = logsOutput.size()
    def sizeLogstTmp = logsTmp.size()

    def status true

    if(sizeConsoleOutput <= 0){
        if(tmp[0] != "<html>" && tmp[sizeTmp - 1] != "</html>"){
            for(int i = 0; i < tmp.size(); i++){
                pushMessageLog(i, tmp[i])
            }
            return tmp
        } 
    } else{
        for(int i = sizeConsoleOutput; i < sizeTmp; i++){
            consoleOutput[i] = tmp[i]

            pushMessageLog(i, consoleOutput[i])

            // Get log child --------------------------------------
            def line = (List<String>) consoleOutput[i].split(" ")
    
            def s = line[0].trim() + " " + line[1].trim()

            if(s.trim() == "Starting building:"){
                def size = line.size() - 1
                def JobChildName = line[size-1].trim()
                def BuilChilddNumber = line[size].substring(1).trim()

                def logChild = (List<String>) []

                while(status) {
                    def logChildTmp = getLog(JobChildName, BuilChilddNumber, )

                    logChild = catchLog(logChild, logChildTmp)

                    sleep(3)

                    if(logChild.size() > 0 && checkStop( logChild[logChild.size() -1].trim() ) ) {
                        status = false
                    }
                }
            }
            // -----------------------------------------------------
        }
    }

    return list
}

def List<String> catchLog(List<String> consoleOutput, List<String> tmp) {
    def sizeConsoleOutput = consoleOutput.size()
    def sizeTmp = tmp.size()

    def status = true

    if(sizeConsoleOutput <= 0){
        if(tmp[0] != "<html>" && tmp[sizeTmp - 1] != "</html>"){
            for(int i = 0; i < tmp.size(); i++){
                pushMessageLog(i, tmp[i])
            }

            return tmp
        } 
    } else{
        for(int i = sizeConsoleOutput; i < sizeTmp; i++){
            consoleOutput[i] = tmp[i]

            pushMessageLog(i, consoleOutput[i])

            // Get log child --------------------------------------
            def line = (List<String>) consoleOutput[i].split(" ")
    
            def s = line[0].trim() + " " + line[1].trim()

            if(s.trim() == "Starting building:"){
                def size = line.size() - 1
                def JobName = line[size-1].trim()
                def BuildNumber = line[size].substring(1).trim()

                def logChild = (List<String>) []

                while(status) {
                    def logChildTmp = getLog(JobName, BuildNumber)

                    logChild = catchLog(logChild, logChildTmp)

                    sleep(3)

                    if(logChild.size() > 0 && checkStop( logChild[logChild.size() -1].trim() ) ) {
                        status = false
                    }
                }
            }
            // -----------------------------------------------------
        }
    }

    return consoleOutput
}

def pushMessageLog(int stt, String message){
    // Push message to server---------
    sh "echo '${stt} : ${message}' >> /home/namth22/log-jenkins.txt"
    // -------------------------------
}

/*
-------------------------------------------------------
*/
//Check when status to stop loop
def boolean checkStop(String status) {
    switch(status) {
        case "Finished: SUCCESS":
        case "Finished: FAILURE":
        case "Finished: ABORTED":
            return true
    }

    return false;
}
/*
-------------------------------------------------------
*/




